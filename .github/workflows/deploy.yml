name: Build and Deploy to GoDaddy

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      deploy_only:
        description: 'Deploy only (skip build)'
        required: false
        type: boolean
        default: false

jobs:
  build:
    if: ${{ !inputs.deploy_only }}
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Install Composer
      run: |
        curl -sS https://getcomposer.org/installer | php
        sudo mv composer.phar /usr/local/bin/composer
    
    - name: Install PHP dependencies
      run: composer install --no-dev --optimize-autoloader
    
    - name: Build
      id: build
      run: |
        echo "Starting build process..."
        npm run build
        echo "Build completed, setting up files..."
        
        echo "Creating config directory..."
        mkdir -p out/config
        
        echo "Copying config files..."
        cp -v config/recaptcha.php out/config/
        
        echo "Copying .htaccess..."
        cp -v .htaccess out/
        
        echo "Copying contact form handler..."
        cp -v contact-form-handler.php out/
        
        echo "Copying vendor directory..."
        cp -rv vendor out/
        
        echo "Listing output directory contents:"
        ls -la out/

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: out/
        retention-days: 5

  deploy:
    needs: build
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
    - name: Download build artifacts
      if: ${{ !inputs.deploy_only }}
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts
        path: out
    
    - name: Checkout repository
      if: ${{ inputs.deploy_only }}
      uses: actions/checkout@v4

    - name: Cache apt packages
      uses: actions/cache@v4
      with:
        path: /var/cache/apt/archives
        key: ${{ runner.os }}-apt-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-apt-

    - name: Install LFTP
      run: |
        sudo apt-get update
        sudo apt-get install -y lftp

    - name: Deploy to GoDaddy
      run: |
        echo "Starting FTP deployment..."
        echo "Connecting to ${{ secrets.FTP_SERVER }}:${{ secrets.FTP_PORT }}"
        
        # Create LFTP commands
        cat > lftp_commands.txt << EOF
        set ssl:verify-certificate no
        set net:timeout 120
        set net:max-retries 5
        set net:reconnect-interval-base 10
        set net:reconnect-interval-multiplier 2
        set net:reconnect-interval-max 30
        set net:connection-limit 1
        open -u ${{ secrets.FTP_USERNAME }},${{ secrets.FTP_PASSWORD }} -p ${{ secrets.FTP_PORT }} ${{ secrets.FTP_SERVER }}
        
        # Upload files with retry logic
        mirror --verbose --reverse --delete --parallel=2 --exclude-glob .git* --exclude-glob node_modules --exclude-glob .DS_Store ./out/ public_html/earlthemonster.com/
        
        # List files after upload
        ls -la public_html/earlthemonster.com/
        
        bye
        EOF
        
        # Execute LFTP commands
        lftp -f lftp_commands.txt
        
        echo "FTP deployment completed" 