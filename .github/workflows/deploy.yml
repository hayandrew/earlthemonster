name: Build and Deploy to GoDaddy

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      deploy_only:
        description: 'Deploy only (skip build)'
        required: false
        type: boolean
        default: false

jobs:
  build:
    if: ${{ !inputs.deploy_only }}
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Install Composer
      run: |
        curl -sS https://getcomposer.org/installer | php
        sudo mv composer.phar /usr/local/bin/composer
    
    - name: Install PHP dependencies
      run: composer install --no-dev --optimize-autoloader
    
    - name: Build
      id: build
      run: |
        echo "Starting build process..."
        npm run build
        echo "Build completed, setting up files..."
        
        echo "Creating config directory..."
        mkdir -p out/config
        
        echo "Copying config files..."
        cp -v config/recaptcha.php out/config/
        
        echo "Copying .htaccess..."
        cp -v .htaccess out/
        
        echo "Copying contact form handler..."
        cp -v contact-form-handler.php out/
        
        echo "Copying vendor directory..."
        cp -rv vendor out/
        
        echo "Listing output directory contents:"
        ls -la out/

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: out/
        retention-days: 5

  deploy:
    needs: build
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
    - name: Download build artifacts
      if: ${{ !inputs.deploy_only }}
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts
        path: out
    
    - name: Checkout repository
      if: ${{ inputs.deploy_only }}
      uses: actions/checkout@v4

    - name: Deploy to GoDaddy
      run: |
        echo "Starting FTP deployment..."
        echo "Connecting to ${{ secrets.FTP_SERVER }}:${{ secrets.FTP_PORT }}"
        
        # Create FTP commands
        cat > ftp_commands.txt << EOF
        open ${{ secrets.FTP_SERVER }} ${{ secrets.FTP_PORT }}
        user ${{ secrets.FTP_USERNAME }} ${{ secrets.FTP_PASSWORD }}
        binary
        prompt
        passive on
        cd public_html/earlthemonster.com
        
        # Upload files individually
        lcd out
        mput *.html
        mput *.txt
        mput *.php
        mput *.ico
        mput *.svg
        
        # Upload directories recursively
        cd _next
        lcd _next
        mput *
        cd ..
        
        cd images
        lcd images
        mput *
        cd ..
        
        cd config
        lcd config
        mput *
        cd ..
        
        cd vendor
        lcd vendor
        mput *
        cd ..
        
        # Upload .htaccess separately
        lcd ..
        put out/.htaccess .htaccess
        
        # List files
        ls -la
        
        bye
        EOF
        
        # Try FTP connection with retries
        max_retries=5
        retry_count=0
        success=false
        
        while [ $retry_count -lt $max_retries ] && [ "$success" = false ]; do
          echo "Attempt $((retry_count + 1)) of $max_retries..."
          
          # Try FTP connection
          ftp -n -v -i -p < ftp_commands.txt &
          ftp_pid=$!
          
          # Wait for 20 seconds
          sleep 20
          
          # Check if FTP process is still running
          if kill -0 $ftp_pid 2>/dev/null; then
            # FTP is still running, kill it and retry
            kill $ftp_pid 2>/dev/null
            echo "Connection timed out, retrying..."
            retry_count=$((retry_count + 1))
            if [ $retry_count -lt $max_retries ]; then
              echo "Waiting 10 seconds before next attempt..."
              sleep 10
            fi
          else
            # Check if FTP completed successfully
            wait $ftp_pid
            if [ $? -eq 0 ]; then
              success=true
              echo "FTP deployment completed successfully"
            else
              retry_count=$((retry_count + 1))
              if [ $retry_count -lt $max_retries ]; then
                echo "Connection failed, waiting 10 seconds before retry..."
                sleep 10
              fi
            fi
          fi
        done
        
        if [ "$success" = false ]; then
          echo "FTP deployment failed after $max_retries attempts"
          exit 1
        fi 